package com.concertApp;

/* autogenerated by Processing revision 1293 on 2025-05-16 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import oscP5.*;
import netP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class androidAppTest extends PApplet {


// Apo33
// Snati1206




OscP5 oscp5;
NetAddress mainAddress;

//timer related stuff
Timer timer;
float timeWindow = 30;
float timeCurrent;

// Player choice buttons here
PlayerButtonManager playerButtons;
int n = 5;

// Music choice buttons here
MusicButtonManager musicButtons;
String[] musicCategory = {"Texture", "Rhythmic", "Abstract", "Silence", "Skip"};
String[] musicChoice = {"/texture", "/rhythmic", "/abstract", "/silence", "/skip" };

// Start button
Button connectButton;

public void setup(){
  
  orientation(LANDSCAPE);  
  background(255);
  /* size commented out by preprocessor */;  
  // Auto adjust font size
  PFont font = createFont("SansSerif", 40 * displayDensity);
  textFont(font);
  
  // Osc stuff here
  oscp5 = new OscP5(this, 7500);
  mainAddress = new NetAddress("192.168.8.242", 8000);
  //mainAddress = new NetAddress("127.0.0.1", 8000);
  // Timer stuff here
  timer = new Timer(timeWindow);
  
  //Buttons here
  playerButtons = new PlayerButtonManager();
  playerButtons.spawn(n);

  musicButtons = new MusicButtonManager();
  musicButtons.spawn(musicCategory, musicChoice);
  
  connectButton = new Button("connect", "/addIP", 20, 20, 100, 80);
  
  //Send Start osc to receive number of players and add the IP to the array
  //sendStart(oscp5, mainAddress);  
}

public void draw(){
  
  background(255);
   
  //Spawn Timer 
  timer.setTimeLeft(timeCurrent);
  timer.update();
  timer.display(width/2,height-20);
  
  //Text Stuff
  textSize(60);
  text("Apo33", width/2, height/10);
  
  //Player Buttons
  playerButtons.display();  
  musicButtons.display();
  connectButton.display();
  
  // Reset music voting
  if (timer.restart == true){
    musicButtons.resetVote();
  }
}

public void OscEvent(OscMessage msg){
  println("OSC received: " + msg.addrPattern() + " " + msg.get(0).floatValue());
  // udpates time left in the round
  timeLeft(msg);  
  // updates number of players to spawn them
  nplayers(msg); 
  
  print("### received an osc message.");
  print(" addrpattern: "+msg.addrPattern());
  println(" typetag: "+msg.typetag());
}

public void touchStarted(){
  if(connectButton.isActive){
    musicButtons.handleTouch(touches[0].x, touches[0].y);
    playerButtons.handleTouch(touches[0].x, touches[0].y);  
  }
  connectButton.handleTouch(touches[0].x, touches[0].y);
}

public void exit(){  
  removeIp(oscp5, mainAddress);
  oscp5.stop();
  super.exit();  
}

//Button class to spawn them with OscAddress and position

class Button{
  
  String name;
  String messageAddress;
  boolean isActive = false;
  boolean isVisible = true; //can adjust it 
  boolean isSent = false; //if 
  float x,y,w,h;
  
  Button(String name, String messageAddress,float x,float y,float w,float h){      
    this.name = name;
    this.messageAddress = messageAddress;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  
  public void display(){    
    if(isVisible){
      if(isActive){
        fill(139,236,118);
      }
      else{
        noFill();
      }
    stroke(0);
    rectMode(CORNER);
    rect(x,y,w,h,10);
    }
    float buttonTextSize = min(w, h) / 3; // Adjust text size based on button dimensions
    textSize(buttonTextSize);
    fill(0);
    textAlign(CENTER,CENTER); //showing player name at the center of the rectangle
    text(name,(x+w/2),(y+h/2)); //text should appear at the center of the box 
  }
  
  public void spawn(){
    isVisible = true;
  }
  
  public void destroy(){
    isVisible = false;
  }
  
  public void active(){
    isActive = true;
  }
  
  //need to change methods, only use this for sending adding ip or removing it
  public void handleTouch(float touchX, float touchY){
    if (isInsideButton(touchX, touchY)){
      isActive = !isActive;
      if(isActive){
        sendStart(oscp5, mainAddress);
      }
      else{
        removeIp(oscp5, mainAddress);
      }      
    }    
  }
  public boolean isInsideButton(float touchX, float touchY){
    return (touchX > x && touchX < x+w && touchY > y &&touchY < y+h);
  }
}

// class to spawn playerButtons
class PlayerButtonManager{
  ArrayList<Button> playerButtons; //array of buttons
  int n; // number of buttons
  
  PlayerButtonManager(){
    playerButtons = new ArrayList<Button>();
  }
  
  public void display(){
    for (Button button : playerButtons){
      button.display();
    }
  }
  
  public void addButton(Button button){
    playerButtons.add(button);
  }
   
  public void spawn(int n){
    
    float boxWidth = width/n;
    float boxHeight= 70;
    
    for (int i = 0; i<n; i++){
      Button button = new Button("musician " + (i+1), "/play" + (i+1), i* boxWidth, height- height/4, boxWidth, boxHeight);
      addButton(button);
    } 
  }
  
  public void handleTouch(float touchX, float touchY){
    for (Button button : playerButtons){
      if (isInsideButton(button, touchX, touchY)){
        button.isActive = !button.isActive;
        sendPlayerState(button.messageAddress, button.isActive);
      }  
    }      
  }
  
  public void sendPlayerState(String address, boolean state){    
    if (oscp5!= null && mainAddress != null){
      OscMessage msg = new OscMessage(address);
      msg.add(state ? 1 : -1);
      oscp5.send(msg, mainAddress);
      println(address + " sent = " + msg.get(0).intValue());
    }

  
  }
  
  public boolean isInsideButton(Button button, float touchX, float touchY){
    return touchX > button.x && touchX< button.x + button.w && touchY > button.y && touchY < button.y + button.h;
  }
}

// class to spawn musicChoiceButtons
class MusicButtonManager{
  
  ArrayList<Button> musicButtons;
  StringDict musicButtonsList;
  int n;
  boolean choiceMade = false; //tracks if a choice has been made
  
  MusicButtonManager(){
    musicButtonsList = new StringDict();
    musicButtons = new ArrayList<Button>();
  }
  
  public void display(){
    for (Button button : musicButtons){
      button.display();
    }    
  }
  
  public void addButton(Button button){
    musicButtons.add(button);
  }
  
  public void spawn(String[] category, String[] address){
    if( category.length == address.length){
      
      float boxWidth = width/category.length;
      float boxHeight = 80;
      
      for (int i = 0; i<category.length; i++){
        Button button = new Button(category[i], address[i], i*boxWidth, height - 2*height/4, boxWidth, boxHeight);
        addButton(button);
      }    
    }    
  }

  public void handleTouch(float touchX, float touchY){
    if (!choiceMade){
      for (Button button : musicButtons){
        if (isInsideButton(button, touchX, touchY)){
          button.active();
          sendMusicVote(button.messageAddress);
          choiceMade = true;
          break;
        }
      }
    }
  }

  public void resetVote(){
    choiceMade = false;
    for (Button button : musicButtons){
      button.isActive = false;
    }
  } 

  public boolean isInsideButton(Button button, float touchX, float touchY){
    return touchX > button.x && touchX< button.x + button.w && touchY > button.y && touchY < button.y + button.h;
  }

  public void sendMusicVote(String address){
    OscMessage msg = new OscMessage(address);
    oscp5.send(msg, mainAddress);
    println("Osc message sent: " + address);
  } 
}

//Method to remove your IP from the IP array in the main program
public void removeIp(OscP5 oscp5, NetAddress address ){  
  OscMessage removeIp = new OscMessage("/removeIP");
  oscp5.send(removeIp, address);
  println("removeIp message sent");
}

// Updates time from the main program //TEEEEST
public void timeLeft(OscMessage msg){
  if (msg.checkAddrPattern("/timer")==true){
    timeCurrent = msg.get(0).floatValue();
    println("timeCurrent = " + timeCurrent);
  }
}

public void nplayers(OscMessage msg){
  if (msg.checkAddrPattern("/nplayers")){
    n = msg.get(0).intValue(); //n players 
  }
}

// Send the Start Method when launching the app, and the addIP
public void sendStart(OscP5 oscp5, NetAddress address){
  if(oscp5 != null && mainAddress != null){
    OscMessage startMessage = new OscMessage("/start");
    OscMessage sendIp = new OscMessage("/addIP");
    oscp5.send(startMessage, address);
    oscp5.send(sendIp, address);
  }
  else {
    println("Oscp5 or mainAddres not recognized");
  }
}

//Timer class to spawn timer

class Timer{
  
  float timeLeft;
  float timeWindow; 
  Boolean restart = false;
  //positioning  
  float x, y;
  
  Timer( float timeWindow){
    this.timeWindow = timeWindow; 
    this.timeLeft = timeWindow; // it starts the same as the time window then it decreases
  }
  
  //Update timer by seconds
  public void update(){
    if (timeLeft < 1.f){ //turn restart true if timeLeft goes below 1 sec
      restart = true;
    }
    else{
      restart = false;
    }
   }
   
   public void setTimeLeft(float t){
     timeLeft = t;
     //println("timeLeft = " +timeLeft);
   }

  //asigns a position to the timer bar
  public void display(float x, float y){    
    this.x = x;
    this.y = y;
    fill(0,0,0);
    float rectWidth = map(timeLeft, 0, timeWindow, 0, width-100); // Map timeLeft to rectangle width
    rectMode(CENTER);
    rect(x, y, rectWidth, 20, 5); // Draw the rectangle    
  }  
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "androidAppTest" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
